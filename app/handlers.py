from aiogram import Router, F
from aiogram.types import Message
from app.keybords import main

router = Router()
task_lists = {}

@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=main)

@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìÉ')
async def cmd_taskList(message: Message):
    user_id = message.from_user.id
    if user_id in task_lists and task_lists[user_id]:
        tasks = "\n".join([f"‚úÖ {task}" if done else f"‚ùå {task}" for task, done in task_lists[user_id]])
        await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks}")
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addItem')

@router.message(F.text.startswith('/createList '))
async def cmd_createList(message: Message):
    user_id = message.from_user.id
    list_name = message.text[len('/createList '):]
    if list_name:
        task_lists[user_id] = []
        await message.answer(f'–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á "{list_name}"')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: `/createList –ú–æ–π —Å–ø–∏—Å–æ–∫`')

@router.message(F.text.startswith('/addItem '))
async def cmd_addItem(message: Message):
    user_id = message.from_user.id
    parts = message.text[len('/addItem '):].split('-')
    if len(parts) == 2 and parts[0].strip() and parts[1].strip():
        if user_id in task_lists:
            task_lists[user_id].append((parts[0].strip(), False))
            await message.answer(f'–ó–∞–¥–∞—á–∞ "{parts[0].strip()}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ "{parts[1].strip()}"')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createList')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `/addItem –ó–∞–¥–∞—á–∞ - –°–ø–∏—Å–æ–∫`. –ü—Ä–∏–º–µ—Ä: `/addItem –ü–æ–∫—É–ø–∫–∏ - –ú–æ–π —Å–ø–∏—Å–æ–∫`')

@router.message(F.text == '/viewLists')
async def cmd_viewLists(message: Message):
    user_id = message.from_user.id
    if user_id in task_lists and task_lists[user_id]:
        lists = "\n".join([f"üìÉ {list_name}" for list_name, _ in task_lists[user_id]])
        await message.answer(f"–í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á:\n{lists}")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createList')

@router.message(F.text.startswith('/viewItems '))
async def cmd_viewItems(message: Message):
    user_id = message.from_user.id
    list_name = message.text[len('/viewItems '):]
    if user_id in task_lists:
        tasks = [(task, done) for task, done in task_lists[user_id] if list_name == task]
        if tasks:
            tasks_text = "\n".join([f"‚úÖ {task}" if done else f"‚ùå {task}" for task, done in tasks])
            await message.answer(f'–ó–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ "{list_name}":\n{tasks_text}')
        else:
            await message.answer(f'–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á "{list_name}" –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createList')


@router.message(F.text.startswith('/done '))
async def cmd_done(message: Message):
    user_id = message.from_user.id
    task_name = message.text[len('/done '):]
    if user_id in task_lists:
        for idx, (task, done) in enumerate(task_lists[user_id]):
            if task_name == task:
                task_lists[user_id][idx] = (task, True)
                await message.answer(f'–ó–∞–¥–∞—á–∞ "{task}" –≤ —Å–ø–∏—Å–∫–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.')
                return
        await message.answer(f'–ó–∞–¥–∞—á–∞ "{task_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–∏—Ö —Å–ø–∏—Å–∫–∞—Ö.')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createList')

@router.message(F.text.startswith('/removeItem '))
async def cmd_removeItem(message: Message):
    user_id = message.from_user.id
    parts = message.text[len('/removeItem '):].split('-')
    if len(parts) == 2 and parts[0].strip() and parts[1].strip():
        if user_id in task_lists:
            list_name = parts[1].strip()
            task_name = parts[0].strip()
            tasks = task_lists[user_id]

            if any(task_name == task for task, _ in tasks):
                task_lists[user_id] = [(task, done) for task, done in tasks if task != task_name]
                await message.answer(f'–ó–∞–¥–∞—á–∞ "{task_name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ "{list_name}"')
            else:
                await message.answer(f'–ó–∞–¥–∞—á–∞ "{task_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ "{list_name}" –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /createList')

@router.message((F.text == '/help') | (F.text == '–ü–æ–º–æ—â—å üìå'))

async def cmd_help(message: Message):
    help_text = """
üìã –ë–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ ü§ñ

–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ë–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–æ–≤, –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –Ω–æ—Ç–∫–æ–π –≤–µ—Å–µ–ª—å—è. üòÑ

–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è:

üìù **–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫**: –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:
   `/createList –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫`

‚úèÔ∏è **–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã**: –î–æ–±–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é:
   `/addItem –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ - –ú–æ–ª–æ–∫–æ, –Ø–π—Ü–∞, –•–ª–µ–±`

üìë **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏**: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π:
   `/viewLists`

üìÑ **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã**: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ:
   `/viewItems –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫`

‚úÖ **–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**: –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–º–µ—Ç—å –µ—ë –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:
   `/done –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ - –Ø–π—Ü–∞`

‚ùå **–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã**: –£–¥–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞:
   `/removeItem –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ - –•–ª–µ–±`

üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫**: –£–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å —Å –Ω–∏–º:
   `/deleteList –ú–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫`

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ `/help` –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.

–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º—Å—è! üòä
"""
    await message.answer(help_text)

@router.message(lambda message: not message.text.startswith('/'))
async def cmd_invalid(message: Message):
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /help.')
